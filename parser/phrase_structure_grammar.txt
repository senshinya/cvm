program := program_units
program_units := translation_unit
program_units := program_units translation_unit
translation_unit := function_definition
translation_unit := declaration
function_definition := declaration_specifiers declarator compound_statement
function_definition := declaration_specifiers declarator declaration_list compound_statement
block_item_list := block_item
block_item_list := block_item_list block_item
block_item := declaration
block_item := statement
declaration_list := declaration
declaration_list := declaration_list declaration
statement := labeled_statement
statement := compound_statement
statement := expression_statement
statement := selection_statement
statement := iteration_statement
statement := jump_statement
labeled_statement := IDENTIFIER COLON statement
labeled_statement := CASE constant_expression COLON statement
labeled_statement := DEFAULT COLON statement
compound_statement := LEFT_BRACES RIGHT_BRACES
compound_statement := LEFT_BRACES block_item_list RIGHT_BRACES
expression_statement := SEMICOLON
expression_statement := expression SEMICOLON
selection_statement := IF LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
selection_statement := IF LEFT_PARENTHESES expression RIGHT_PARENTHESES statement ELSE statement
selection_statement := SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
iteration_statement := WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
iteration_statement := DO statement WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMICOLON
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON expression SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON SEMICOLON expression RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON expression SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON SEMICOLON expression RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON expression SEMICOLON expression RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON expression SEMICOLON expression RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES declaration SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES declaration expression SEMICOLON RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES declaration SEMICOLON expression RIGHT_PARENTHESES statement
iteration_statement := FOR LEFT_PARENTHESES declaration expression SEMICOLON expression RIGHT_PARENTHESES statement
jump_statement := GOTO IDENTIFIER SEMICOLON
jump_statement := CONTINUE SEMICOLON
jump_statement := BREAK SEMICOLON
jump_statement := RETURN SEMICOLON
jump_statement := RETURN expression SEMICOLON
declaration := declaration_specifiers SEMICOLON
declaration := declaration_specifiers init_declarator_list SEMICOLON
declaration_specifiers := storage_class_specifier
declaration_specifiers := type_specifier
declaration_specifiers := type_qualifier
declaration_specifiers := function_specifier
declaration_specifiers := storage_class_specifier declaration_specifiers
declaration_specifiers := type_specifier declaration_specifiers
declaration_specifiers := type_qualifier declaration_specifiers
declaration_specifiers := function_specifier declaration_specifiers
storage_class_specifier := TYPEDEF
storage_class_specifier := EXTERN
storage_class_specifier := STATIC
storage_class_specifier := AUTO
storage_class_specifier := REGISTER
type_specifier := VOID
type_specifier := CHAR
type_specifier := SHORT
type_specifier := INT
type_specifier := LONG
type_specifier := FLOAT
type_specifier := DOUBLE
type_specifier := SIGNED
type_specifier := UNSIGNED
type_specifier := BOOL
type_specifier := COMPLEX
type_specifier := struct_or_union_specifier
type_specifier := enum_specifier
type_specifier := TYPE_NAME
struct_or_union_specifier := struct_or_union LEFT_BRACES struct_declaration_list RIGHT_BRACES
struct_or_union_specifier := struct_or_union IDENTIFIER LEFT_BRACES struct_declaration_list RIGHT_BRACES
struct_or_union_specifier := struct_or_union IDENTIFIER
struct_or_union := STRUCT
struct_or_union := UNION
struct_declaration_list := struct_declaration
struct_declaration_list := struct_declaration_list struct_declaration
struct_declaration := specifier_qualifier_list struct_declarator_list SEMICOLON
specifier_qualifier_list := type_specifier
specifier_qualifier_list := type_specifier specifier_qualifier_list
specifier_qualifier_list := type_qualifier
specifier_qualifier_list := type_qualifier specifier_qualifier_list
struct_declarator_list := struct_declarator
struct_declarator_list := struct_declarator_list COMMA struct_declarator
struct_declarator := declarator
struct_declarator := COLON constant_expression
struct_declarator := declarator COLON constant_expression
enum_specifier := ENUM LEFT_BRACES enumerator_list RIGHT_BRACES
enum_specifier := ENUM IDENTIFIER LEFT_BRACES enumerator_list RIGHT_BRACES
enum_specifier := ENUM LEFT_BRACES enumerator_list COMMA RIGHT_BRACES
enum_specifier := ENUM IDENTIFIER LEFT_BRACES enumerator_list COMMA RIGHT_BRACES
enum_specifier := ENUM IDENTIFIER
enumerator_list := enumerator
enumerator_list := enumerator_list COMMA enumerator
enumerator := enumeration_constant
enumerator := enumeration_constant EQUAL constant_expression
enumeration_constant := IDENTIFIER
type_qualifier := CONST
type_qualifier := RESTRICT
type_qualifier := VOLATILE
function_specifier := INLINE
init_declarator_list := init_declarator
init_declarator_list := init_declarator_list COMMA init_declarator
init_declarator := declarator
init_declarator := declarator EQUAL initializer
declarator := direct_declarator
declarator := pointer direct_declarator
pointer := ASTERISK
pointer := ASTERISK type_qualifier_list
pointer := ASTERISK pointer
pointer := ASTERISK type_qualifier_list pointer
type_qualifier_list := type_qualifier
type_qualifier_list := type_qualifier_list type_qualifier
direct_declarator := IDENTIFIER
direct_declarator := LEFT_PARENTHESES declarator RIGHT_PARENTHESES
direct_declarator := direct_declarator LEFT_BRACKETS RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS assignment_expression RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list assignment_expression RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS ASTERISK RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list ASTERISK RIGHT_BRACKETS
direct_declarator := direct_declarator LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES
direct_declarator := direct_declarator LEFT_PARENTHESES RIGHT_PARENTHESES
direct_declarator := direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
parameter_type_list := parameter_list
parameter_type_list := parameter_list COMMA VARIADIC
parameter_list := parameter_declaration
parameter_list := parameter_list COMMA parameter_declaration
parameter_declaration := declaration_specifiers
parameter_declaration := declaration_specifiers declarator
parameter_declaration := declaration_specifiers abstract_declarator
abstract_declarator := pointer
abstract_declarator := direct_abstract_declarator
abstract_declarator := pointer direct_abstract_declarator
direct_abstract_declarator := LEFT_PARENTHESES RIGHT_PARENTHESES
direct_abstract_declarator := LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES
direct_abstract_declarator := direct_abstract_declarator LEFT_PARENTHESES RIGHT_PARENTHESES
direct_abstract_declarator := direct_abstract_declarator LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES
direct_abstract_declarator := LEFT_PARENTHESES abstract_declarator RIGHT_PARENTHESES
direct_abstract_declarator := LEFT_BRACKETS RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS
direct_abstract_declarator := LEFT_BRACKETS ASTERISK RIGHT_BRACKETS
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS ASTERISK RIGHT_BRACKETS
identifier_list := IDENTIFIER
identifier_list := identifier_list COMMA IDENTIFIER
initializer_list := initializer
initializer_list := designation initializer
initializer_list := initializer_list COMMA initializer
initializer_list := initializer_list COMMA designation initializer
initializer := assignment_expression
initializer := LEFT_BRACES initializer_list RIGHT_BRACES
initializer := LEFT_BRACES initializer_list COMMA RIGHT_BRACES
designation := designator_list EQUAL
designator_list := designator
designator_list := designator_list designator
designator := LEFT_BRACKETS constant_expression RIGHT_BRACKETS
designator := PERIOD IDENTIFIER
primary_expression := IDENTIFIER
primary_expression := constant_expression
primary_expression := LEFT_PARENTHESES expression RIGHT_PARENTHESES
constant_expression := STRING
constant_expression := CHARACTER
constant_expression := INTEGER_CONSTANT
constant_expression := FLOATING_CONSTANT
expression := assignment_expression
expression := expression COMMA assignment_expression
assignment_expression := conditional_expression
assignment_expression := unary_expression assignment_operator assignment_expression
assignment_operator := EQUAL
assignment_operator := MULTIPLY_EQUAL
assignment_operator := DIVIDE_EQUAL
assignment_operator := MOD_EQUAL
assignment_operator := PLUS_EQUAL
assignment_operator := MINUS_EQUAL
assignment_operator := LEFT_SHIFT_EQUAL
assignment_operator := RIGHT_SHIFT_EQUAL
assignment_operator := AND_EQUAL
assignment_operator := XOR_EQUAL
assignment_operator := OR_EQUAL
conditional_expression := logical_or_expression
conditional_expression := logical_or_expression QUESTION expression COLON conditional_expression
logical_or_expression := logical_and_expression
logical_or_expression := logical_or_expression OR_OR logical_and_expression
logical_and_expression := inclusive_or_expression
logical_and_expression := logical_and_expression AND_AND inclusive_or_expression
inclusive_or_expression := exclusive_or_expression
inclusive_or_expression := inclusive_or_expression OR exclusive_or_expression
exclusive_or_expression := and_expression
exclusive_or_expression := exclusive_or_expression XOR and_expression
and_expression := equality_expression
and_expression := and_expression AND equality_expression
equality_expression := relational_expression
equality_expression := equality_expression EQUAL_EQUAL relational_expression
equality_expression := equality_expression NOT_EQUAL relational_expression
relational_expression := shift_expression
relational_expression := relational_expression LESS shift_expression
relational_expression := relational_expression GREATER shift_expression
relational_expression := relational_expression LESS_EQUAL shift_expression
relational_expression := relational_expression GREATER_EQUAL shift_expression
shift_expression := additive_expression
shift_expression := shift_expression LEFT_SHIFT additive_expression
shift_expression := shift_expression RIGHT_SHIFT additive_expression
additive_expression := multiplicative_expression
additive_expression := additive_expression PLUS multiplicative_expression
additive_expression := additive_expression MINUS multiplicative_expression
multiplicative_expression := cast_expression
multiplicative_expression := multiplicative_expression ASTERISK cast_expression
multiplicative_expression := multiplicative_expression SLASH cast_expression
multiplicative_expression := multiplicative_expression PERCENT cast_expression
cast_expression := unary_expression
cast_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
unary_expression := postfix_expression
unary_expression := PLUS_PLUS unary_expression
unary_expression := MINUS_MINUS unary_expression
unary_expression := unary_operator cast_expression
unary_expression := SIZEOF unary_expression
unary_expression := SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
unary_operator := AND
unary_operator := ASTERISK
unary_operator := PLUS
unary_operator := MINUS
unary_operator := TILDE
unary_operator := EXCLAMATION
postfix_expression := primary_expression
postfix_expression := postfix_expression LEFT_BRACKETS expression RIGHT_BRACKETS
postfix_expression := postfix_expression LEFT_PARENTHESES RIGHT_PARENTHESES
postfix_expression := postfix_expression LEFT_PARENTHESES argument_expression_list RIGHT_PARENTHESES
postfix_expression := postfix_expression PERIOD IDENTIFIER
postfix_expression := postfix_expression ARROW IDENTIFIER
postfix_expression := postfix_expression PLUS_PLUS
postfix_expression := postfix_expression MINUS_MINUS
postfix_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_BRACES initializer_list RIGHT_BRACES
postfix_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_BRACES initializer_list COMMA RIGHT_BRACES
argument_expression_list := assignment_expression
argument_expression_list := argument_expression_list COMMA assignment_expression
type_name := specifier_qualifier_list
type_name := specifier_qualifier_list abstract_declarator
