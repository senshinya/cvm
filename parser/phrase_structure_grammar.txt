program := program_units|1
program_units := translation_unit|1
program_units := program_units translation_unit|2
translation_unit := function_definition|1
translation_unit := declaration|2
function_definition := declaration_specifiers declarator compound_statement|1
function_definition := declaration_specifiers declarator declaration_list compound_statement|2
block_item_list := block_item|1
block_item_list := block_item_list block_item|2
block_item := declaration|1
block_item := statement|2
declaration_list := declaration|1
declaration_list := declaration_list declaration|2
statement := labeled_statement|1
statement := compound_statement|2
statement := expression_statement|3
statement := selection_statement|4
statement := iteration_statement|5
statement := jump_statement|6
labeled_statement := IDENTIFIER COLON statement|1
labeled_statement := CASE constant_expression COLON statement|2
labeled_statement := DEFAULT COLON statement|3
compound_statement := LEFT_BRACES RIGHT_BRACES|1
compound_statement := LEFT_BRACES block_item_list RIGHT_BRACES|2
expression_statement := SEMICOLON|1
expression_statement := expression SEMICOLON|2
selection_statement := IF LEFT_PARENTHESES expression RIGHT_PARENTHESES statement|1
selection_statement := IF LEFT_PARENTHESES expression RIGHT_PARENTHESES statement ELSE statement|2
selection_statement := SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement|3
iteration_statement := WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES statement|1
iteration_statement := DO statement WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMICOLON|2
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON SEMICOLON RIGHT_PARENTHESES statement|3
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON SEMICOLON RIGHT_PARENTHESES statement|4
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON expression SEMICOLON RIGHT_PARENTHESES statement|5
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON SEMICOLON expression RIGHT_PARENTHESES statement|6
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON expression SEMICOLON RIGHT_PARENTHESES statement|7
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON SEMICOLON expression RIGHT_PARENTHESES statement|8
iteration_statement := FOR LEFT_PARENTHESES SEMICOLON expression SEMICOLON expression RIGHT_PARENTHESES statement|9
iteration_statement := FOR LEFT_PARENTHESES expression SEMICOLON expression SEMICOLON expression RIGHT_PARENTHESES statement|10
iteration_statement := FOR LEFT_PARENTHESES declaration SEMICOLON RIGHT_PARENTHESES statement|11
iteration_statement := FOR LEFT_PARENTHESES declaration expression SEMICOLON RIGHT_PARENTHESES statement|12
iteration_statement := FOR LEFT_PARENTHESES declaration SEMICOLON expression RIGHT_PARENTHESES statement|13
iteration_statement := FOR LEFT_PARENTHESES declaration expression SEMICOLON expression RIGHT_PARENTHESES statement|14
jump_statement := GOTO IDENTIFIER SEMICOLON|1
jump_statement := CONTINUE SEMICOLON|2
jump_statement := BREAK SEMICOLON|3
jump_statement := RETURN SEMICOLON|4
jump_statement := RETURN expression SEMICOLON|5
declaration := declaration_specifiers SEMICOLON|1
declaration := declaration_specifiers init_declarator_list SEMICOLON|2
declaration_specifiers := storage_class_specifier|1
declaration_specifiers := type_specifier|2
declaration_specifiers := type_qualifier|3
declaration_specifiers := function_specifier|4
declaration_specifiers := storage_class_specifier declaration_specifiers|5
declaration_specifiers := type_specifier declaration_specifiers|6
declaration_specifiers := type_qualifier declaration_specifiers|7
declaration_specifiers := function_specifier declaration_specifiers|8
storage_class_specifier := TYPEDEF|1
storage_class_specifier := EXTERN|2
storage_class_specifier := STATIC|3
storage_class_specifier := AUTO|4
storage_class_specifier := REGISTER|5
type_specifier := VOID|1
type_specifier := CHAR|2
type_specifier := SHORT|3
type_specifier := INT|4
type_specifier := LONG|5
type_specifier := FLOAT|6
type_specifier := DOUBLE|7
type_specifier := SIGNED|8
type_specifier := UNSIGNED|9
type_specifier := BOOL|10
type_specifier := COMPLEX|11
type_specifier := struct_or_union_specifier|12
type_specifier := enum_specifier|13
type_specifier := typedef_name|14
typedef_name := IDENTIFIER|1
struct_or_union_specifier := struct_or_union LEFT_BRACES struct_declaration_list RIGHT_BRACES|1
struct_or_union_specifier := struct_or_union IDENTIFIER LEFT_BRACES struct_declaration_list RIGHT_BRACES|2
struct_or_union_specifier := struct_or_union IDENTIFIER|3
struct_or_union := STRUCT|1
struct_or_union := UNION|2
struct_declaration_list := struct_declaration|1
struct_declaration_list := struct_declaration_list struct_declaration|2
struct_declaration := specifier_qualifier_list struct_declarator_list SEMICOLON|1
specifier_qualifier_list := type_specifier|1
specifier_qualifier_list := type_specifier specifier_qualifier_list|2
specifier_qualifier_list := type_qualifier|3
specifier_qualifier_list := type_qualifier specifier_qualifier_list|4
struct_declarator_list := struct_declarator|1
struct_declarator_list := struct_declarator_list COMMA struct_declarator|2
struct_declarator := declarator|1
struct_declarator := COLON constant_expression|2
struct_declarator := declarator COLON constant_expression|3
enum_specifier := ENUM LEFT_BRACES enumerator_list RIGHT_BRACES|1
enum_specifier := ENUM IDENTIFIER LEFT_BRACES enumerator_list RIGHT_BRACES|2
enum_specifier := ENUM LEFT_BRACES enumerator_list COMMA RIGHT_BRACES|3
enum_specifier := ENUM IDENTIFIER LEFT_BRACES enumerator_list COMMA RIGHT_BRACES|4
enum_specifier := ENUM IDENTIFIER|5
enumerator_list := enumerator|1
enumerator_list := enumerator_list COMMA enumerator|2
enumerator := enumeration_constant|1
enumerator := enumeration_constant EQUAL constant_expression|2
enumeration_constant := IDENTIFIER|1
type_qualifier := CONST|1
type_qualifier := RESTRICT|2
type_qualifier := VOLATILE|3
function_specifier := INLINE|1
init_declarator_list := init_declarator|1
init_declarator_list := init_declarator_list COMMA init_declarator|2
init_declarator := declarator|1
init_declarator := declarator EQUAL initializer|2
declarator := direct_declarator|1
declarator := pointer direct_declarator|2
pointer := ASTERISK|1
pointer := ASTERISK type_qualifier_list|2
pointer := ASTERISK pointer|3
pointer := ASTERISK type_qualifier_list pointer|4
type_qualifier_list := type_qualifier|1
type_qualifier_list := type_qualifier_list type_qualifier|2
direct_declarator := IDENTIFIER|1
direct_declarator := LEFT_PARENTHESES declarator RIGHT_PARENTHESES|2
direct_declarator := direct_declarator LEFT_BRACKETS RIGHT_BRACKETS|3
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS|4
direct_declarator := direct_declarator LEFT_BRACKETS assignment_expression RIGHT_BRACKETS|5
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list assignment_expression RIGHT_BRACKETS|6
direct_declarator := direct_declarator LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS|7
direct_declarator := direct_declarator LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS|8
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS|9
direct_declarator := direct_declarator LEFT_BRACKETS ASTERISK RIGHT_BRACKETS|10
direct_declarator := direct_declarator LEFT_BRACKETS type_qualifier_list ASTERISK RIGHT_BRACKETS|11
direct_declarator := direct_declarator LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES|12
direct_declarator := direct_declarator LEFT_PARENTHESES RIGHT_PARENTHESES|13
direct_declarator := direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES|14
parameter_type_list := parameter_list|1
parameter_type_list := parameter_list COMMA VARIADIC|2
parameter_list := parameter_declaration|1
parameter_list := parameter_list COMMA parameter_declaration|2
parameter_declaration := declaration_specifiers|1
parameter_declaration := declaration_specifiers declarator|2
parameter_declaration := declaration_specifiers abstract_declarator|3
abstract_declarator := pointer|1
abstract_declarator := direct_abstract_declarator|2
abstract_declarator := pointer direct_abstract_declarator|3
direct_abstract_declarator := LEFT_BRACKETS RIGHT_BRACKETS|1
direct_abstract_declarator := LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS|2
direct_abstract_declarator := LEFT_BRACKETS assignment_expression RIGHT_BRACKETS|3
direct_abstract_declarator := LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS|4
direct_abstract_declarator := LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS|5
direct_abstract_declarator := LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS|6
direct_abstract_declarator := LEFT_BRACKETS ASTERISK RIGHT_BRACKETS|7
direct_abstract_declarator := LEFT_PARENTHESES RIGHT_PARENTHESES|8
direct_abstract_declarator := LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES|9
direct_abstract_declarator := LEFT_PARENTHESES abstract_declarator RIGHT_PARENTHESES|10
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS RIGHT_BRACKETS|11
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list RIGHT_BRACKETS|12
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS assignment_expression RIGHT_BRACKETS|13
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list assignment_expression RIGHT_BRACKETS|14
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS STATIC assignment_expression RIGHT_BRACKETS|15
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS STATIC type_qualifier_list assignment_expression RIGHT_BRACKETS|16
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS type_qualifier_list STATIC assignment_expression RIGHT_BRACKETS|17
direct_abstract_declarator := direct_abstract_declarator LEFT_BRACKETS ASTERISK RIGHT_BRACKETS|18
direct_abstract_declarator := direct_abstract_declarator LEFT_PARENTHESES RIGHT_PARENTHESES|19
direct_abstract_declarator := direct_abstract_declarator LEFT_PARENTHESES parameter_type_list RIGHT_PARENTHESES|20
identifier_list := IDENTIFIER|1
identifier_list := identifier_list COMMA IDENTIFIER|2
initializer_list := initializer|1
initializer_list := designation initializer|2
initializer_list := initializer_list COMMA initializer|3
initializer_list := initializer_list COMMA designation initializer|4
initializer := assignment_expression|1
initializer := LEFT_BRACES initializer_list RIGHT_BRACES|2
initializer := LEFT_BRACES initializer_list COMMA RIGHT_BRACES|3
designation := designator_list EQUAL|1
designator_list := designator|1
designator_list := designator_list designator|2
designator := LEFT_BRACKETS constant_expression RIGHT_BRACKETS|1
designator := PERIOD IDENTIFIER|2
primary_expression := IDENTIFIER|1
primary_expression := STRING|2
primary_expression := CHARACTER|3
primary_expression := INTEGER_CONSTANT|4
primary_expression := FLOATING_CONSTANT|5
primary_expression := LEFT_PARENTHESES expression RIGHT_PARENTHESES|6
constant_expression := conditional_expression|1
expression := assignment_expression|1
expression := expression COMMA assignment_expression|2
assignment_expression := conditional_expression|1
assignment_expression := unary_expression assignment_operator assignment_expression|2
assignment_operator := EQUAL|1
assignment_operator := MULTIPLY_EQUAL|2
assignment_operator := DIVIDE_EQUAL|3
assignment_operator := MOD_EQUAL|4
assignment_operator := PLUS_EQUAL|5
assignment_operator := MINUS_EQUAL|6
assignment_operator := LEFT_SHIFT_EQUAL|7
assignment_operator := RIGHT_SHIFT_EQUAL|8
assignment_operator := AND_EQUAL|9
assignment_operator := XOR_EQUAL|10
assignment_operator := OR_EQUAL|11
conditional_expression := logical_or_expression|1
conditional_expression := logical_or_expression QUESTION expression COLON conditional_expression|2
logical_or_expression := logical_and_expression|1
logical_or_expression := logical_or_expression OR_OR logical_and_expression|2
logical_and_expression := inclusive_or_expression|1
logical_and_expression := logical_and_expression AND_AND inclusive_or_expression|2
inclusive_or_expression := exclusive_or_expression|1
inclusive_or_expression := inclusive_or_expression OR exclusive_or_expression|2
exclusive_or_expression := and_expression|1
exclusive_or_expression := exclusive_or_expression XOR and_expression|2
and_expression := equality_expression|1
and_expression := and_expression AND equality_expression|2
equality_expression := relational_expression|1
equality_expression := equality_expression EQUAL_EQUAL relational_expression|2
equality_expression := equality_expression NOT_EQUAL relational_expression|3
relational_expression := shift_expression|1
relational_expression := relational_expression LESS shift_expression|2
relational_expression := relational_expression GREATER shift_expression|3
relational_expression := relational_expression LESS_EQUAL shift_expression|4
relational_expression := relational_expression GREATER_EQUAL shift_expression|5
shift_expression := additive_expression|1
shift_expression := shift_expression LEFT_SHIFT additive_expression|2
shift_expression := shift_expression RIGHT_SHIFT additive_expression|3
additive_expression := multiplicative_expression|1
additive_expression := additive_expression PLUS multiplicative_expression|2
additive_expression := additive_expression MINUS multiplicative_expression|3
multiplicative_expression := cast_expression|1
multiplicative_expression := multiplicative_expression ASTERISK cast_expression|2
multiplicative_expression := multiplicative_expression SLASH cast_expression|3
multiplicative_expression := multiplicative_expression PERCENT cast_expression|4
cast_expression := unary_expression|1
cast_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression|2
unary_expression := postfix_expression|1
unary_expression := PLUS_PLUS unary_expression|2
unary_expression := MINUS_MINUS unary_expression|3
unary_expression := unary_operator cast_expression|4
unary_expression := SIZEOF unary_expression|5
unary_expression := SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES|6
unary_operator := AND|1
unary_operator := ASTERISK|2
unary_operator := PLUS|3
unary_operator := MINUS|4
unary_operator := TILDE|5
unary_operator := EXCLAMATION|6
postfix_expression := primary_expression|1
postfix_expression := postfix_expression LEFT_BRACKETS expression RIGHT_BRACKETS|2
postfix_expression := postfix_expression LEFT_PARENTHESES RIGHT_PARENTHESES|3
postfix_expression := postfix_expression LEFT_PARENTHESES argument_expression_list RIGHT_PARENTHESES|4
postfix_expression := postfix_expression PERIOD IDENTIFIER|5
postfix_expression := postfix_expression ARROW IDENTIFIER|6
postfix_expression := postfix_expression PLUS_PLUS|7
postfix_expression := postfix_expression MINUS_MINUS|8
postfix_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_BRACES initializer_list RIGHT_BRACES|9
postfix_expression := LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_BRACES initializer_list COMMA RIGHT_BRACES|10
argument_expression_list := assignment_expression|1
argument_expression_list := argument_expression_list COMMA assignment_expression|2
type_name := specifier_qualifier_list|1
type_name := specifier_qualifier_list abstract_declarator|2
